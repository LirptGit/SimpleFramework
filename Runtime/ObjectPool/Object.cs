using System;

namespace SimpleFramework
{
    /// <summary>
    /// 内部对象
    /// </summary>
    /// <typeparam name="T">对象类型</typeparam>
    public class Object<T> : IReference where T : ObjectBase
    {
        private T m_Object;
        private int m_SpawnCount;

        /// <summary>
        /// 初始化内部对象的新实例
        /// </summary>
        public Object()
        {
            m_Object = null;
            m_SpawnCount = 0;
        }

        /// <summary>
        /// 获取对象上次使用时间
        /// </summary>
        public DateTime LastUseTime
        {
            get
            {
                return m_Object.LastUseTime;
            }
        }


        /// <summary>
        /// 获取对象是否正在使用
        /// </summary>
        public bool IsInUse
        {
            get
            {
                return m_SpawnCount > 0;
            }
        }

        /// <summary>
        /// 创建内部对象
        /// </summary>
        /// <param name="obj">对象</param>
        /// <param name="spawned">对象是否已被获取</param>
        /// <returns>创建的内部对象</returns>
        public static Object<T> Create(T obj, bool spawned)
        {
            Object<T> internalObject = ReferencePool.Acquire<Object<T>>();
            internalObject.m_Object = obj;
            internalObject.m_SpawnCount = spawned ? 1 : 0;
            if (spawned)
            {
                obj.OnSpawn();
            }

            return internalObject;
        }

        /// <summary>
        /// 清理内部对象
        /// </summary>
        public void Clear()
        {
            m_Object = null;
            m_SpawnCount = 0;
        }

        /// <summary>
        /// 查看对象
        /// </summary>
        /// <returns>对象</returns>
        public T Peek()
        {
            return m_Object;
        }

        /// <summary>
        /// 获取对象
        /// </summary>
        /// <returns>对象</returns>
        public T Spawn()
        {
            m_SpawnCount++;
            m_Object.LastUseTime = DateTime.UtcNow;
            m_Object.OnSpawn();
            return m_Object;
        }

        /// <summary>
        /// 回收对象
        /// </summary>
        public void Unspawn()
        {
            m_Object.OnUnspawn();
            m_Object.LastUseTime = DateTime.UtcNow;
            m_SpawnCount--;
        }

        /// <summary>
        /// 释放对象
        /// </summary>
        /// <param name="isShutdown">是否是关闭对象池时触发</param>
        public void Release(bool isShutdown)
        {
            m_Object.Release(isShutdown);
            ReferencePool.Release(m_Object);
        }
    }
}